{"diagram":"ClassDiagram","nodes":[{"methods":"# rollIsTutto(): Tuple","name":"Bonus\n","x":310,"y":890,"attributes":"- BONUS_VALUE: int <<static>>","id":7,"type":"ClassNode"},{"methods":"# rollIsTutto(): Tuple","name":"X2","x":1580,"y":890,"attributes":"","id":5,"type":"ClassNode"},{"methods":"+ doSleep(): void","name":"InputOutputUtils","x":1260,"y":400,"attributes":"- aSecond: int {read only}","id":0,"type":"ClassNode"},{"methods":"- getBestPlayer(): ArrayList<Player>\n+ playerWon(): boolean\n- setUpPlayers(Integer): void\n+ displayChart(): void\n+ nextPlayerMove(int): void\n- printNameDelimiter(Player): void <<static>>\n- printDelimiter(): void <<static>>","name":"Board","x":10,"y":10,"attributes":"- aPlayers: ArrayList<Player>\n- MAX_POINTS: Integer <<static>>\n- aCurrentPlayerIndex: int\n- aRandomCardFactory(): FlyWeightDeck  {read only}","id":15,"type":"ClassNode"},{"methods":"+ makeMove(): Tuple","name":"PlusMinus","x":550,"y":890,"attributes":"","id":6,"type":"ClassNode"},{"methods":"+ getPoints(): int\n+ compareTo(Object): int\n","name":"Player","x":60,"y":330,"attributes":"- PLAYER_NAME: String {read only}\n- aPoints: int","id":16,"type":"ClassNode"},{"methods":"# rollIsTutto(): Tuple\n+ makeMove(): Tuple","name":"Straight","x":1400,"y":890,"attributes":"","id":4,"type":"ClassNode"},{"methods":"+ rollNotValid(): int\n+ makeMove(): Tuple\n+ rollIsTutto(): Tuple\n+ getInstance(): CloverLeaf","name":"SingletonCloverLeaf","x":730,"y":890,"attributes":"- INSTANCE : SingletonCloverLeaf {read only}\n+ aAlreadyTutto: boolean","id":12,"type":"ClassNode"},{"methods":"+ getInteger(): int","name":"<<Enum>>\nDiceValues","x":370,"y":540,"attributes":"+ value: int","id":14,"type":"ClassNode"},{"methods":"+ rollDice(Integer): ArrayList<DiceValues>","name":"<<Abstract>>\nDice ","x":300,"y":420,"attributes":"","id":9,"type":"ClassNode"},{"methods":"- prepareCardsNew(): void\n+ getRandomCard(): Card","name":"FlyWeightDeck","x":990,"y":70,"attributes":"- aCardFlyWeightStore: ArrayList<Card>","id":1,"type":"ClassNode"},{"methods":"+ makeMove(): Tuple","name":"Stop","x":1220,"y":890,"attributes":"","id":3,"type":"ClassNode"},{"methods":"+ getFirst(): int\n+ getSecond(): boolean","name":"Tuple","x":790,"y":150,"attributes":"- aFirst: int\n- aSecond: int","id":10,"type":"ClassNode"},{"methods":"+ isValid(): boolean\n+ putAsideDice(): void\n","name":"RollStraight","x":650,"y":610,"attributes":"","id":8,"type":"ClassNode"},{"methods":"+ startOverRoll(): void\n+ rollDice(): void\n+ putAside(): void\n+ getRolledDices(): ArrayList<Integer>\n# calculateFrequencies(): int[]\n+ isValid(): boolean\n+ isTutto(): boolean\n+ putAsideDice(): void","name":"Roll","x":610,"y":330,"attributes":"# aPoints: int\n# aRolledDice: ArrayList<DiceValues>\n# aFrequencyOfValues: int[]\n# aDiceLeft: int","id":13,"type":"ClassNode"},{"methods":"+ toString(): String <<abstract>>\n# printRoll(): void\n+ addIntermediatePoints(): void \n# protected Tuple rollIsTutto(): Tuple\n# rollNotValid(): int\n# stopOrRoll(): boolean\n+ makeMove(): Tuple","name":"<<Abstract>>\nCard","x":1000,"y":250,"attributes":"+ aIntermediatePoints: int\n+ aRoll: Roll\n# aSleeper: InputOutputUtils\n\n","id":11,"type":"ClassNode"},{"methods":"# rollNotValid(): int\n+ getRoll(): Roll\n+ makeMove(): Tuple","name":"Firework","x":1040,"y":890,"attributes":"","id":2,"type":"ClassNode"}],"edges":[{"Generalization Type":"Inheritance","start":6,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":3,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":4,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":5,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":2,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":12,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":7,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":8,"end":13,"type":"GeneralizationEdge"},{"middleLabel":"","start":10,"directionality":"Unidirectional","end":11,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":11,"type":"DependencyEdge"},{"startLabel":"1","middleLabel":"","start":1,"end":11,"endLabel":"56","type":"AggregationEdge","Aggregation Type":"Composition"},{"startLabel":"","middleLabel":"","start":15,"end":16,"endLabel":"1...*","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"middleLabel":"","start":13,"directionality":"Unidirectional","end":11,"type":"DependencyEdge"},{"middleLabel":"","start":14,"directionality":"Unidirectional","end":9,"type":"DependencyEdge"},{"middleLabel":"","start":9,"directionality":"Unidirectional","end":13,"type":"DependencyEdge"},{"middleLabel":"","start":14,"directionality":"Unidirectional","end":13,"type":"DependencyEdge"},{"middleLabel":"","start":1,"directionality":"Unidirectional","end":15,"type":"DependencyEdge"},{"middleLabel":"","start":10,"directionality":"Unidirectional","end":15,"type":"DependencyEdge"},{"middleLabel":"","start":11,"directionality":"Unidirectional","end":15,"type":"DependencyEdge"}],"version":"3.4"}
