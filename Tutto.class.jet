{"diagram":"ClassDiagram","nodes":[{"methods":"+ getRandomCard(): Card\n- prepareCardsNew(): void","name":"FlyWeightDeck","x":990,"y":70,"attributes":"- aCardFlyWeightStore: ArrayList<Card>","id":8,"type":"ClassNode"},{"methods":"+ validUserInput(): boolean\n+ isValid(): boolean\n+ putAsideDices(): void\n","name":"RollStraight","x":560,"y":540,"attributes":"# aAssideDices: boolean[]","id":9,"type":"ClassNode"},{"methods":"+ toString(): String\n+ makeMove(): Tuple","name":"PlusMinus","x":540,"y":820,"attributes":"","id":14,"type":"ClassNode"},{"methods":"+ toString(): String\n+ getInteger(): int","name":"<<Enum>>\nDiceValues","x":340,"y":430,"attributes":"+ aValue: int {read only}","id":0,"type":"ClassNode"},{"methods":"+ getPlayerName(): String\n+ getPlayerInitial(): Character\n+ addPoints(int): void\n+ getPoints(): int\n+ compareTo(Object): int\n+ hashCode(): int\n","name":"Player","x":20,"y":350,"attributes":"- PLAYER_NAME: String {read only}\n- aPoints: int","id":3,"type":"ClassNode"},{"methods":"+ toString(): String\n# rollIsTutto(): Tuple","name":"X2","x":1560,"y":820,"attributes":"","id":10,"type":"ClassNode"},{"methods":"+ toString(): String\n+ makeMove(): Tuple","name":"Stop","x":1210,"y":820,"attributes":"","id":11,"type":"ClassNode"},{"methods":"+ toString(): String\n+ makeMove(): Tuple\n# rollIsTutto(): Tuple","name":"Straight","x":1390,"y":820,"attributes":"","id":12,"type":"ClassNode"},{"methods":"+ toString(): String\n+ makeMove(): Tuple\n+ addIntermediatePoints(int): void \n# printRoll(): void\n# protected Tuple rollIsTutto(): Tuple\n# rollNotValid(): int\n# stopOrRoll(): boolean","name":"<<Abstract>>\nCard","x":1000,"y":290,"attributes":"# aIntermediatePoints: int\n# aRoll: Roll\n# aSleeper: InputOutputUtils\n\n","id":5,"type":"ClassNode"},{"methods":"+ playerWon(): boolean\n+ displayChart(): void\n+ nextPlayerMove(int, boolean): void\n# setUpPlayers(Integer): void\n- getBestPlayer(): ArrayList<Player>\n- printNameDelimiter(Player): void\n- printDelimiter(): void","name":"Board","x":10,"y":10,"attributes":"# aRandomCardFactory: FlyWeightDeck\n# aScanner: Scanner\n# aPlayers: ArrayList<Player>\n# MAX_POINTS: Integer\n- aCurrentPlayerIndex: int","id":2,"type":"ClassNode"},{"methods":"+ whichToPutAside(): void\n+ getPoints(): int\n+ cleanUpUserInput(String): int[]\n+ validUserInput(): boolean\n+ isValid(): boolean\n+ isTutto(): boolean\n+ putAsideDices(): void\n+ startOverRoll(): void\n+ rollDices(): void\n+ putAside(): void\n+ getRolledDices(): ArrayList<Integer>\n# calculateFrequencies(): int[]","name":"Roll","x":540,"y":260,"attributes":"# aPoints: int\n# aRolledDice: ArrayList<DiceValues>\n# aFrequencyOfValues: int[]\n# aDicesLeft: int\n# aUserFreq: int[]","id":4,"type":"ClassNode"},{"methods":"+ rollDice(Integer): ArrayList<DiceValues>","name":"<<Abstract>>\nDice ","x":300,"y":330,"attributes":"","id":1,"type":"ClassNode"},{"methods":"+ toString(): String\n+ rollNotValid(): int\n+ makeMove(): Tuple\n+ rollIsTutto(): Tuple\n+ getInstance(): SingletonCloverLeaf","name":"SingletonCloverLeaf","x":720,"y":820,"attributes":"+ aAlreadyTutto: boolean\n# INSTANCE : SingletonCloverLeaf","id":16,"type":"ClassNode"},{"methods":"+ getFirst(): int\n+ getSecond(): boolean\n+ toString(): String\n+ equals(Object): boolean\n+ hashCode(): int","name":"Tuple","x":790,"y":120,"attributes":"- aFirst: int\n- aSecond: int","id":6,"type":"ClassNode"},{"methods":"+ doSleep(): void\n+ getIntegerInput(string): int\n- checkNumeric(String): boolean","name":"InputOutputUtils","x":1220,"y":340,"attributes":"- aSecond: int {read only}","id":7,"type":"ClassNode"},{"methods":"+ toString(): String\n+ makeMove(): Tuple\n# rollNotValid(): int","name":"Firework","x":1030,"y":820,"attributes":"","id":13,"type":"ClassNode"},{"methods":"+ toString(): String\n# rollIsTutto(): Tuple","name":"Bonus\n","x":300,"y":820,"attributes":"- BONUS_VALUE: int {read only}","id":15,"type":"ClassNode"}],"edges":[{"Generalization Type":"Inheritance","start":14,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":11,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":12,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":10,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":13,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":16,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":15,"end":5,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":9,"end":4,"type":"GeneralizationEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"startLabel":"1","middleLabel":"","start":8,"end":5,"endLabel":"56","type":"AggregationEdge","Aggregation Type":"Composition"},{"startLabel":"","middleLabel":"","start":2,"end":3,"endLabel":"1...*","type":"AggregationEdge","Aggregation Type":"Aggregation"},{"middleLabel":"","start":4,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":1,"type":"DependencyEdge"},{"middleLabel":"","start":1,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"middleLabel":"","start":8,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"},{"middleLabel":"","start":6,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"middleLabel":"","start":5,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"},{"middleLabel":"","start":6,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"}],"version":"3.4"}
